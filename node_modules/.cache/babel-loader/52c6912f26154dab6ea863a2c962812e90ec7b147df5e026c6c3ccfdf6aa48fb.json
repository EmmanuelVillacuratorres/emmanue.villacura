{"ast":null,"code":"export async function registrarUsuario({\n  nombreUsuario,\n  password,\n  correo\n}) {\n  const res = await fetch('http://localhost:4000/api/usuarios', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      nombreUsuario,\n      password,\n      correo\n    })\n  });\n  return await res.json();\n}\nexport async function obtenerUsuarios() {\n  const res = await fetch('http://localhost:4000/api/usuarios');\n  return await res.json();\n}\nexport async function eliminarUsuario(id) {\n  const res = await fetch(`http://localhost:4000/api/usuarios/${id}`, {\n    method: 'DELETE'\n  });\n  return await res.json();\n}\nexport async function loginUsuario({\n  username,\n  password\n}) {\n  const res = await fetch('http://localhost:4000/api/usuarios/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  return await res.json();\n}\nrouter.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    await sql.connect(config);\n    const result = await sql.query`\n      SELECT Id, NombreUsuario, Correo, Rol\n      FROM Usuarios\n      WHERE NombreUsuario = ${username} AND HashPassword = ${password}\n    `;\n    if (result.recordset.length === 1) {\n      res.json({\n        success: true,\n        user: result.recordset[0]\n      });\n    } else {\n      res.json({\n        success: false,\n        message: 'Usuario o contraseña incorrectos'\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});","map":{"version":3,"names":["registrarUsuario","nombreUsuario","password","correo","res","fetch","method","headers","body","JSON","stringify","json","obtenerUsuarios","eliminarUsuario","id","loginUsuario","username","router","post","req","sql","connect","config","result","query","recordset","length","success","user","message","err","status","error"],"sources":["C:/Users/emman/Desktop/project (1)/src/api/usuarios.js"],"sourcesContent":["export async function registrarUsuario({ nombreUsuario, password, correo }) {\r\n  const res = await fetch('http://localhost:4000/api/usuarios', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ nombreUsuario, password, correo })\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function obtenerUsuarios() {\r\n  const res = await fetch('http://localhost:4000/api/usuarios');\r\n  return await res.json();\r\n}\r\n\r\nexport async function eliminarUsuario(id) {\r\n  const res = await fetch(`http://localhost:4000/api/usuarios/${id}`, {\r\n    method: 'DELETE'\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function loginUsuario({ username, password }) {\r\n  const res = await fetch('http://localhost:4000/api/usuarios/login', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ username, password })\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nrouter.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n  try {\r\n    await sql.connect(config);\r\n    const result = await sql.query`\r\n      SELECT Id, NombreUsuario, Correo, Rol\r\n      FROM Usuarios\r\n      WHERE NombreUsuario = ${username} AND HashPassword = ${password}\r\n    `;\r\n    if (result.recordset.length === 1) {\r\n      res.json({ success: true, user: result.recordset[0] });\r\n    } else {\r\n      res.json({ success: false, message: 'Usuario o contraseña incorrectos' });\r\n    }\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});"],"mappings":"AAAA,OAAO,eAAeA,gBAAgBA,CAAC;EAAEC,aAAa;EAAEC,QAAQ;EAAEC;AAAO,CAAC,EAAE;EAC1E,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;IAC5DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAET,aAAa;MAAEC,QAAQ;MAAEC;IAAO,CAAC;EAC1D,CAAC,CAAC;EACF,OAAO,MAAMC,GAAG,CAACO,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeC,eAAeA,CAAA,EAAG;EACtC,MAAMR,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;EAC7D,OAAO,MAAMD,GAAG,CAACO,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeE,eAAeA,CAACC,EAAE,EAAE;EACxC,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,sCAAsCS,EAAE,EAAE,EAAE;IAClER,MAAM,EAAE;EACV,CAAC,CAAC;EACF,OAAO,MAAMF,GAAG,CAACO,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeI,YAAYA,CAAC;EAAEC,QAAQ;EAAEd;AAAS,CAAC,EAAE;EACzD,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;IAClEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEM,QAAQ;MAAEd;IAAS,CAAC;EAC7C,CAAC,CAAC;EACF,OAAO,MAAME,GAAG,CAACO,IAAI,CAAC,CAAC;AACzB;AAEAM,MAAM,CAACC,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEf,GAAG,KAAK;EACxC,MAAM;IAAEY,QAAQ;IAAEd;EAAS,CAAC,GAAGiB,GAAG,CAACX,IAAI;EACvC,IAAI;IACF,MAAMY,GAAG,CAACC,OAAO,CAACC,MAAM,CAAC;IACzB,MAAMC,MAAM,GAAG,MAAMH,GAAG,CAACI,KAAK;AAClC;AACA;AACA,8BAA8BR,QAAQ,uBAAuBd,QAAQ;AACrE,KAAK;IACD,IAAIqB,MAAM,CAACE,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MACjCtB,GAAG,CAACO,IAAI,CAAC;QAAEgB,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAEL,MAAM,CAACE,SAAS,CAAC,CAAC;MAAE,CAAC,CAAC;IACxD,CAAC,MAAM;MACLrB,GAAG,CAACO,IAAI,CAAC;QAAEgB,OAAO,EAAE,KAAK;QAAEE,OAAO,EAAE;MAAmC,CAAC,CAAC;IAC3E;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ1B,GAAG,CAAC2B,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;MAAEqB,KAAK,EAAEF,GAAG,CAACD;IAAQ,CAAC,CAAC;EAC9C;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}